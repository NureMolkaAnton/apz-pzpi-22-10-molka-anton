Харківський національний університет радіоелектроніки

Кафедра програмної інженерії






Звіт
З Практичної роботи № 2
«Архітектура браузера Moziilla Firefox»

з дисципліни «Архітектура програмного забезпечення» 





Виконав:             		Перевірив:
студент гр. ПЗПІ 22-10  	Старший викладач каф. ПІ
Молька Антон Васильович		Сокорчук  І. П.




Харків 2025
 

ІСТОРІЯ ЗМІН

№	Дата	Версія звіту	Опис змін та виправлень
1	18.05.2025	0.1	Створення розділів: «Завдання», «Опис виконаної роботи», «Висновки»
2	24.05.2025	0.2	Розроблено слайди преезнтації, додано їх в Додаток Б та додано посилання на відеозапис доповіді з хронологічним описом
 
ЗАВДАННЯ

1.	Підготувати доповідь про архітектуру браузера Mozilla Firefox.  
ОПИС ВИКОНАНОЇ РОБОТИ

У процесі дослідження теми "Архітектура Mozilla Firefox: Технічний аналіз" було проведено комплексний аналіз модульної структури браузера, його ключових компонентів, еволюції підсистем і використання патернів проєктування, спираючись на документ "Conceptual Architecture of Firefox", Mozilla Developer Network, Mozilla Wiki та інші джерела. Основну увагу приділено підсистемі Gecko, її інтеграції з компонентами SpiderMonkey, Necko, NSS/PSM, а також застосуванню патернів GoF і GRASP для забезпечення модульності та ефективності.
Розроблено презентацію, що детально розкриває архітектуру Firefox, включно з концептуальним оглядом, внутрішньою структурою Gecko, функціональністю SpiderMonkey і Necko, багатопроцесністю через Electrolysis, а також перевагами, недоліками та порівнянням із Chromium. Досліджено еволюцію Gecko від рендерингового рушія до комплексного модуля, що інтегрує рендеринг (Quantum Render, WebGL), мережеві операції (Necko з HTTP/2, NSS/PSM для TLS), JavaScript (SpiderMonkey з IonMonkey JIT) і XML-парсинг. Проаналізовано конвеєр рендерингу та асинхронні механізми, як nsIChannel у Necko, що забезпечують неблокуючу роботу.
Вивчено застосування патернів проєктування: GoF (Observer для обробки DOM-подій через nsIEventTarget і Factory для створення DOM-елементів через nsIDOMDocument) та GRASP (Low Coupling для взаємодії Gecko-Necko через XPCOM-інтерфейси і Information Expert для делегування парсингу HTML/CSS до Gecko). Джерела для патернів чітко розмежовано: GoF базуються на книзі Gamma et al., "Design Patterns: Elements of Reusable Object-Oriented Software", а GRASP — на книзі Larman, "Applying UML and Patterns".
Ця робота дозволила отримати глибоке розуміння архітектури Firefox як модульної, відкритої системи, що використовує сучасні технології та патерни проєктування для забезпечення гнучкості, стабільності та відповідності стандартам, а також виявила ключові виклики, пов’язані зі складністю та продуктивністю, що є важливими для подальшого розвитку браузера. 
ВИСНОВКИ

У даній доповіді проведено всебічний аналіз архітектури Mozilla Firefox, що підкреслив її модульну структуру та ключові принципи побудови. Визначено, що Firefox — це складна, але добре спроектована система, починаючи з ядра Gecko, яке інтегрує рендеринг (Quantum Render, WebGL), мережеві операції (Necko з HTTP/2, NSS/PSM для TLS) і JavaScript (SpiderMonkey з IonMonkey JIT), і завершуючись гнучким інтерфейсом на основі XUL та XPCOM.
Гнучкість і модульність архітектури дозволяють Firefox ефективно працювати на різних платформах — від настільних комп’ютерів до мобільних пристроїв, а використання патернів GoF (Observer, Factory) і GRASP (Low Coupling, Information Expert) знижує складність розробки, сприяючи створенню підтримуваного та розширюваного коду. Незважаючи на виклики, пов’язані зі складністю кодової бази та вищими ресурсними вимогами через багатопроцесність Electrolysis, постійне вдосконалення — зокрема оптимізація Stylo для CSS, підтримка нових протоколів у Necko та відповідність стандартам W3C/ECMAScript — демонструє здатність Firefox до еволюції та адаптації.
Поєднання модульності через XPCOM, ефективності Gecko, асинхронних механізмів Necko та активної підтримки спільноти забезпечує Firefox провідну роль на ринку браузерів, гарантуючи надійну платформу для сучасних вебтехнологій і широкий спектр можливостей для користувачів і розробників. 
ДОДАТОК А

Відеозапис доповіді на YouTube: https://youtu.be/qnQ8TuNe37s
00:00 - Intro
00:17 - Що таке патерн Facade?
00:51 - Проблема, яку вирішує Facade
01:25 - Як працює Facade
03:00 - Якщо не використовувати Facade
04:44 - Як Facade вирішує проблему
05:38 - Порівняння
06:17 - Переваги і недоліки 
07:06 - Пов’язані патерни
07:41 - Висновки
08:48 - Перелік використаних джерел
09:51 - Дякую за увагу 
ДОДАТОК Б
 
Рисунок 1 –	Титульний слайд

 
Рисунок 2 –	Загальна архітектура Firefox
 
Рисунок 3 –	Концептуальна схема архітектури
 
Рисунок 4 –	Деталізація компонентів

 
Рисунок 5 –	Gecko: Рушій браузера
 
Рисунок 6 –	SpiderMonkey: JavaScript Engine

 
Рисунок 7 –	Necko: Мережевий стек
 
Рисунок 8 –	Патерн Observer
 
Рисунок 9 –	Патерн Factory
 
Рисунок 10 –	Патерн Low Coupling
 
Рисунок 11 –	Патерн Information Expert
 
Рисунок 12 –	Багатопроцесність (Electolysis)

 
Рисунок 13 –	Переваги і недоліки


 
Рисунок 14 –	Перелік використаних джерел
 
Рисунок 15 –	Дякую за увагу
