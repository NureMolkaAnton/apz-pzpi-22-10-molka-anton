Харківський національний університет радіоелектроніки

Кафедра програмної інженерії






Звіт
З Лабораторної роботи № 3
«Web застосунок»

з дисципліни «Архітектура програмного забезпечення» 





Виконав:             		Перевірив:
студент гр. ПЗПІ 22-10  	асистент каф. ПІ
Молька Антон Васильович		Дашенков  Д. О.




Харків 2025
 
1. Опис прийнятих інженерних рішень

Під час розробки цього веб-застосунку було прийнято низку інженерних рішень, спрямованих на забезпечення масштабованості, безпеки та зручності підтримки коду. Основою клієнтської частини став фреймворк React у поєднанні з TypeScript, що дозволяє забезпечити типобезпечність і зменшити кількість помилок під час розробки. Для швидкої розробки та сучасного дев-середовища було обрано білд-систему Vite, яка забезпечує гаряче оновлення модулів (HMR) і швидкий старт проєкту.
Структура проєкту організована за принципом розділення відповідальностей: у папці src/pages розміщуються сторінки застосунку (наприклад, Login, Register, AdminDashboard, Profile, Home, Sensors, SolarPanels, Dashboard), у папці src/components — спільні компоненти інтерфейсу, такі як Navigation та ProtectedRoute. Бізнес-логіка, зокрема автентифікація, винесена у папку src/services, а конфігураційні файли, наприклад, для API, знаходяться у src/config. Окремо виділені типи TypeScript у папці src/types та файли для інтернаціоналізації у src/i18n.
Для підтримки багатомовності використовується бібліотека i18next, а всі текстові ресурси зберігаються у вигляді окремих JSON-файлів для кожної мови та секції застосунку. Інтерфейс побудований на основі Material UI (MUI), що дозволяє швидко створювати адаптивні, сучасні та доступні компоненти з підтримкою skeleton-екранів, snackbar-повідомлень і діалогових вікон.
Особливу увагу приділено безпеці: доступ до адміністративної панелі мають лише користувачі з електронною адресою, що закінчується на @arkanova.com, а захист маршрутів реалізовано через компонент ProtectedRoute. Всі запити до бекенду виконуються через fetch із використанням централізованої конфігурації базового URL та підтримкою credentials для авторизації.
Файлова структура проєкту дозволяє легко масштабувати застосунок, розділяючи логіку, інтерфейс, типи та локалізації. Для адміністраторів реалізовано функціонал імпорту та експорту резервних копій бази даних через SQL-файли, що забезпечує додаткову гнучкість і безпеку даних. 
2. Опис взаємодії компонентів web-застосунку одне з одним та з іншими елементами системи

Взаємодія компонентів у цьому веб-застосунку організована наступним чином. Головний компонент App.tsx відповідає за маршрутизацію та підключення основних провайдерів, таких як i18n для багатомовності та MUI для темізації інтерфейсу. Компонент Navigation відображає меню, яке динамічно змінюється залежно від ролі користувача (адміністратор чи звичайний користувач).
Сервіс AuthService відповідає за зберігання інформації про користувача у localStorage, перевірку автентифікації та визначення ролі користувача. Сторінки Login та Register реалізують процес автентифікації та реєстрації, а також здійснюють редіректи залежно від ролі користувача. Адміністративна панель (AdminDashboard) надає можливість адміністратору виконувати CRUD-операції над користувачами, а також імпортувати та експортувати резервні копії даних. Інші сторінки, такі як Profile, Home, Sensors, SolarPanels, доступні лише автентифікованим користувачам.
Всі сторінки взаємодіють із бекендом через HTTP-запити, використовуючи fetch та конфігурацію з файлу src/config/api.ts. Для відображення текстів у відповідній мові всі компоненти використовують хук useTranslation з бібліотеки i18next. Функціонал імпорту та експорту резервних копій реалізовано через GET- та POST-запити: експорт здійснюється шляхом отримання SQL-файлу з сервера та його збереження на диск, а імпорт — шляхом відправки SQL-файлу у вигляді binary-даних на сервер.
Таким чином, компоненти застосунку тісно взаємодіють між собою через спільні сервіси, конфігурації та інтернаціоналізацію, а також забезпечують безпечну та зручну роботу з бекендом для різних ролей користувачів.

 
3. UML діаграма прецедентів (Use Case Diagram)
 
Рисунок 1 – Use Case діаграма 
4. UML діаграма компонентів (Component Diagram).
 
Рисунок 2 - Діаграма компонентів
  
5. UML діаграма станів (State Diagram)
 
Рисунок 3 – Діаграма станів
 
6. UML діаграма взаємодії (Interaction Overview Diagram)

 
Рисунок 4 – Діаграма взаємодії
 
ДОДАТОК А
Посилання на репозиторій проєкту на GitHub: https://github.com/NureMolkaAnton/apz-pzpi-22-10-molka-anton/tree/main/Lab3 (ArkaNova/web)
